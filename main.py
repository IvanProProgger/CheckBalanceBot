import asyncio
import shelve
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import filters
from config import USER, BOT_TOKEN
from parser import Parser
from datetime import datetime, time

DB = shelve.open("database", writeback=True)

if DB.get("clients") is None:
    DB["clients"] = set()

message = datetime.today().date()

async def report_loop(bot: Bot) -> None:

    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –ª–∏ —Å—É–º–º–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
     –Ω–∞ —Å—á–µ—Ç—É chesnok (–±–æ–ª–µ–µ 5 —Ç—ã—Å.—Ä—É–±.),
     –Ω–∞–ª–∏—á–∏–µ –°–ú–°-–æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"""
    while True:
        for login, password in USER.items():
            datetime_now = datetime.now()
            time_now = datetime_now.time()
            try:
                parser = Parser(user=login, password=password)
                await parser.login()
                value = await parser.get_balance()
                if time_now < time(hour=17, minute=0, second=0):
                    today_sms = await parser.check_sms()
                    message = parser.is_message(datetime_now.date())
                    if not today_sms and not message:
                        for client in DB["clients"]:
                            await bot.send_message(client, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ")
                if isinstance(value, str):
                    for client in DB["clients"]:
                        await bot.send_message(client, value, parse_mode=types.ParseMode.MARKDOWN)
                else:
                    if value < 5000:
                        for client in DB["clients"]:
                            await bot.send_message(client, f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç ChesnokBet RUB."
                                                           f"–°—É–º–º–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É ChesnokBet RUB: {value}."
                                                           f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ {5000-value}–†")
            except Exception as e:
                print(e)
        await asyncio.sleep(60 * 60)


async def start_handler(message: types.Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ –≤ –±–∞–∑—É."""
    DB["clients"].add(message.chat.id)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.get_mention(as_html=True)} üëã!\n–ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å ChesnokBet –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ 5000–† - —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!",
        parse_mode=types.ParseMode.HTML,
    )


async def exit_handler(message: types.Message) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã."""
    if message.chat.id in DB["clients"]:
        DB["clients"].remove(message.chat.id)
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, {message.from_user.get_mention(as_html=True)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è.",
            parse_mode=types.ParseMode.HTML,
        )
    else:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, {message.from_user.get_mention(as_html=True)} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.",
            parse_mode=types.ParseMode.HTML,
        )


async def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    try:
        dispatcher = Dispatcher(bot=bot)
        dispatcher.register_message_handler(start_handler, commands={"start", "restart"})
        dispatcher.register_message_handler(exit_handler, commands={"exit"})
        asyncio.create_task(report_loop(bot))
        await dispatcher.start_polling()
    finally:
        DB.close()
        await bot.close()


if __name__ == '__main__':
    asyncio.run(main())